generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PARTICIPANT
  JUDGE
  ADMIN
}

enum Category {
  MUSIC
  ART
  FICTION
  CINEMA
  POETRY
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  FEATURED
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String
  role        Role         @default(PARTICIPANT)
  displayName String?
  age         Int?
  createdAt   DateTime     @default(now())
  comments    Comment[]
  applause    Applause[]
  feedback    Feedback[]
  submissions Submission[]
}

model Submission {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  category    Category
  description String?
  artistBio   String?
  contentUrl  String?     // file location (local dev / S3)
  wordCount   Int?
  durationSec Int?
  status      Status      @default(PENDING)
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime    @default(now())
  comments    Comment[]
  applause    Applause[]
  feedback    Feedback[]
  featuredIn  Featured[]
}

model Comment {
  id           String     @id @default(cuid())
  body         String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  author       User       @relation(fields: [authorId], references: [id])
  authorId     String
  createdAt    DateTime   @default(now())
}

model Applause {
  id           String     @id @default(cuid())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())

  @@unique([submissionId, userId]) // 1 applause per user per submission
}

model Feedback {
  id           String     @id @default(cuid())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  judge        User       @relation(fields: [judgeId], references: [id])
  judgeId      String
  originality  Int
  craft        Int
  impact       Int
  cohesion     Int
  comment      String?
  createdAt    DateTime   @default(now())

  @@unique([submissionId, judgeId]) // each judge scores once
}

model WeekDrop {
  id          String    @id @default(cuid())
  startsAt    DateTime
  endsAt      DateTime
  featured    Featured[]
  editorNote  String?   // optional, so existing rows donâ€™t break
}

model Featured {
  id           String     @id @default(cuid())
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  weekDrop     WeekDrop   @relation(fields: [weekDropId], references: [id])
  weekDropId   String
  rank         Int        // 1,2,3 within category
}
