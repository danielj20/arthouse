// ===============================
// Prisma Schema for Arthouse
// ===============================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------

enum Role {
  PARTICIPANT
  JUDGE
  ADMIN
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  email     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  used      Boolean  @default(false)
}

enum Category {
  MUSIC
  ART
  FICTION
  CINEMA
  POETRY
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  FEATURED
}

enum ReviewResponseType {
  TEXT
  AUDIO
  VIDEO
}

enum AnnotationKind {
  IMAGE_PIN     // x,y normalized (0..1)
  TIME_POINT    // single timestamp (startSec)
  TIME_RANGE    // startSec..endSec
  TEXT_SPAN     // character range
}

// ---------- MODELS ----------

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  password    String?
  displayName String?
  role        Role         @default(PARTICIPANT)
  age         Int?
  createdAt   DateTime     @default(now())

  submissions Submission[]
  reviews     Review[]     @relation("JudgeReviews")
  comments    Comment[]
  applause    Applause[]
}

// ---------- Submissions ----------

model Submission {
  id          String       @id @default(cuid())
  title       String
  slug        String       @unique
  category    Category
  description String?
  contentUrl  String?
  wordCount   Int?
  durationSec Int?
  artistBio   String?      // kept from your previous schema
  status      SubmissionStatus @default(PENDING)

  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime     @default(now())

  reviews     Review[]
  comments    Comment[]
  applause    Applause[]
  featuredIn  Featured[]
}

// ---------- Reviews (core) ----------

model Review {
  id            String     @id @default(cuid())
  submission    Submission @relation(fields: [submissionId], references: [id])
  submissionId  String
  judge         User       @relation("JudgeReviews", fields: [judgeId], references: [id])
  judgeId       String

  // required overall response (pick one)
  overallType     ReviewResponseType
  overallText     String?        // when TEXT
  overallMediaUrl String?        // when AUDIO/VIDEO (S3 URL)
  overallMediaSec Int?           // media duration in seconds

  // rubrics (1â€“100)
  voice     Int
  craft     Int
  clarity   Int
  affect    Int

  // derived composite, XX.X/100
  composite Decimal? @db.Decimal(5, 1)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([submissionId, judgeId]) // one review per judge per submission
  @@index([submissionId])
  @@index([judgeId])
}


// ---------- Social & Meta ----------

model Comment {
  id           String      @id @default(cuid())
  content      String
  createdAt    DateTime    @default(now())

  author       User        @relation(fields: [authorId], references: [id])
  authorId     String

  submission   Submission  @relation(fields: [submissionId], references: [id])
  submissionId String
}

model Applause {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())

  submission   Submission  @relation(fields: [submissionId], references: [id])
  submissionId String

  user         User        @relation(fields: [userId], references: [id])
  userId       String

  @@unique([submissionId, userId]) // keep same order as your old schema
}

// ---------- Weekly Drops ----------

model WeekDrop {
  id         String     @id @default(cuid())
  startsAt   DateTime
  endsAt     DateTime
  editorNote String?    // your earlier request to add an editor's note

  featured   Featured[]
}

model Featured {
  id           String     @id @default(cuid())

  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String

  weekDrop     WeekDrop   @relation(fields: [weekDropId], references: [id])
  weekDropId   String

  rank         Int        // 1,2,3 within category (kept)
  createdAt    DateTime   @default(now())

  @@index([weekDropId])
  @@index([submissionId])
}
